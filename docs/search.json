[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Crowdfunding Analysis Project",
    "section": "",
    "text": "1 Introduction\nIn recent years, crowdfunding has become very prevalent, especially for aspiring entrepreneurs who are hoping to raise money for their projects. Crowdfunding allows people and organizations to raise money for their projects, while also allowing donors to support the causes that they believe in. There have been many successful crowdfunding projects over the years, created by both creative artists and companies. There are two main types of crowdfunding projects, rewards crowdfunding and equity crowdfunding. Rewards crowdfunding is described as a way for entrepreneurs to pre-sell a product or service, while equity crowdfunding is a way for the supporters to purchase unlisted shares of a company. The rise of social media has also made it easier to share crowdfunding projects, drawing the attention of people from around the world to support the project.\nKickstarter is one of the largest and most notable crowdfunding platforms. It is a website where individuals and organizations can post their projects, and backers can pledge money to projects that interest them. If the project is successful, then the pledge will go through; otherwise, the money is returned to the backers. Some crowdfunding projects on Kickstarter were very successful; for example, Coolest Cooler raised over $13 million to create a cooler, while artists such as Amanda Palmer and Zach Braff were able to raise $1.2 million and $3 million, respectively, for their creative endeavors. However, many crowdfunding projects fail to meet their target amount.\nWe are interested in exploring the different types of crowdfunding projects, specifically on Kickstarter. We would also like to see if some projects are more likely to succeed than other projects, based on the characteristics of those projects and the creators of the projects. What is the distribution of the target amount of donations that the projects hope to raise, and what is the distribution of the amount that is actually pledged? We could also explore the effects of social media on the success of the projects.\nMoreover, we are interested in seeing if there are “peaks” of activity among backers for crowdfunding projects. Are there periods of time throughout the year when backers are more generous? We would also like to gain insight on the behaviors of project backers. For instance, how much money do supporters tend to pledge on average, and does this change for projects that are more successful in meeting their target donation amount?\nSources: https://www.entrepreneur.com/starting-a-business/crowdfunding-generates-more-than-60000-an-hour/234051 https://www.theguardian.com/technology/2014/apr/17/kickstarter-crowdfunding-technology-film-games"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nTo understand the different types of projects that are on Kickstarter, we could look at the projects by category, as well as the most common key words in the names of the projects. Whether the project is successful or not is indicated by the State column, so we can facet based on State to determine if there are distinguishing characteristics specific to the projects that are successful. The dataset also provides information about the creator, such as the number of Facebook friends that they have if they’ve connected their Facebook to their page, and the number of Facebook shares for their project. The dataset also contains information about the creator pages, including the number of other projects that the creator has created, as well as the amount of content of these pages (including the number of images and videos, the number of words in the Description and Risks and Challenges sections, and the number of FAQs). These are all numerical quantities, for which we could create data visualizations.\nWe can also use the Goal column to visualize the target amount of donations for the projects, as well as the Pledged column to display the amount of money that the backers promise to give (if the project is successful). Since different currencies are used for the projects, we would have to standardize to USD.\nSince we are given the start and end times of the projects, we can plot the number of active projects at a given time. This can be further broken down into the successful and failed projects, to determine if the dates during which the project ran had an effect on whether the project was successful. To get the average amount of money that the project backers promise to donate to a project, we can divide the amount pledged by the number of backers. Faceting on whether the project was successful or not will give us more insight on how the distribution of the average amount backers donated to a project may differ."
  },
  {
    "objectID": "data.html#data-pre-processing",
    "href": "data.html#data-pre-processing",
    "title": "2  Data",
    "section": "2.2 Data Pre-processing",
    "text": "2.2 Data Pre-processing\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nread raw data\n\n\nCode\nraw_df &lt;- read_tsv(\"https://raw.githubusercontent.com/1819398633/crowd_funding/master/18k_Projects.csv\", show_col_types = FALSE)\nraw_df &lt;- raw_df %&gt;% select(c(-Url, -`Start Timestamp (UTC)`, -`End Timestamp (UTC)`))\n\n\nThere are 5 duplicated rows and 64 duplicated ID.\n\n\nCode\n# duplicate rows (5)\nnrow(raw_df) - nrow(raw_df %&gt;% distinct())\n\n\n[1] 5\n\n\nCode\n# duplicate ID: 64\nnrow(raw_df %&gt;% distinct()) - nrow(raw_df %&gt;% distinct() %&gt;%  distinct(Id, .keep_all=TRUE))\n\n\n[1] 64\n\n\nRemove duplication. For samples with the same ID, select the one with fewer missing values.\n\n\nCode\nclean_df &lt;- raw_df %&gt;% distinct()\n\n# get NA number for each row\nclean_df &lt;- clean_df %&gt;% \n  mutate(na_num = rowSums(is.na(.)))\n\n# for each ID, select the one with fewer NAs\n# Keep only one for those with same number of NAs\nclean_df &lt;- clean_df %&gt;% \n  group_by(Id) %&gt;% \n  slice_min(na_num, n=1) %&gt;% \n  distinct(Id, .keep_all=TRUE) %&gt;% as_tibble()\n# 69 duplications removed\n# nrow(raw_df) - nrow(clean_df)\n\n\nCheck feature data types: the types are already converted.\n\n\nCode\n# glimpse(clean_df) %&gt;% head()\n# already converted\n# too long, output not included here\n\n\nTransform currency features into the same unit (USD) and apply log transform\n\n\nCode\nclean_df &lt;- clean_df %&gt;% mutate(Pledged_USD=case_when(Currency==\"USD\"~Pledged, \n                                            Currency==\"CAD\"~0.74*Pledged, \n                                            Currency==\"AUD\"~0.66*Pledged, \n                                            Currency==\"GBP\"~1.26*Pledged, \n                                            Currency==\"EUR\"~1.08*Pledged, \n                                            Currency==\"NZD\"~0.61*Pledged))\nclean_df &lt;- clean_df %&gt;% mutate(Goal_USD=case_when(Currency==\"USD\"~Goal, \n                                         Currency==\"CAD\"~0.74*Goal, \n                                         Currency==\"AUD\"~0.66*Goal, \n                                         Currency==\"GBP\"~1.26*Goal, \n                                         Currency==\"EUR\"~1.08*Goal, \n                                         Currency==\"NZD\"~0.61*Goal))\n\nclean_df &lt;- clean_df %&gt;% mutate(log_pledged_usd=log(Pledged_USD), log_goal_usd=log(Goal_USD)) \n\n\nConvert locations into spacial coordinates\n\n\nCode\nlocations_cleaned &lt;- read.csv(\"https://raw.githubusercontent.com/1819398633/crowd_funding/master/location_coordinates.csv\") \n\nclean_df &lt;- left_join(clean_df, locations_cleaned, by=\"Location\", multiple=\"first\") %&gt;% \n  mutate(Latitude=ifelse(is.na(Latitude), latitude, Latitude),\n         Longitude=ifelse(is.na(Longitude), longitude, Longitude)) %&gt;% select(-latitude, -longitude)\n\n\nCheck for outliers and abnormalities: We checked the goal amount. There is a project with extreme high goal value, 0 updates and only 1 dollar pledged. Thus we consider it as an outlier and remove it.\n\n\nCode\n# normal\nclean_df %&gt;% slice_min(n=10, order_by = Goal_USD) %&gt;% pull(Goal_USD)\n\n\n [1]  66  74  74  74  74  74  99 100 100 100 100 100 100 100 100 100 100 100 100\n[20] 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n[39] 100 100 100 100 100 100 100 100 100 100\n\n\nCode\n# outlier exist\nclean_df %&gt;% slice_max(n=10, order_by = Goal_USD) %&gt;% pull(Goal_USD)\n\n\n [1] 1.00e+08 8.00e+06 7.00e+06 6.10e+06 6.00e+06 5.00e+06 3.63e+06 3.00e+06\n [9] 2.96e+06 2.80e+06\n\n\nCode\nclean_df %&gt;% slice_max(n=1, order_by = Goal_USD)\n\n\n# A tibble: 1 × 37\n        Id Name  State Currency `Top Category` Category Creator Location Updates\n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1   1.81e9 The … fail… USD      Film & Video   Shorts   Chris … Denver         0\n# ℹ 28 more variables: Comments &lt;dbl&gt;, Rewards &lt;dbl&gt;, Goal &lt;dbl&gt;,\n#   Pledged &lt;dbl&gt;, Backers &lt;dbl&gt;, Start &lt;date&gt;, End &lt;date&gt;,\n#   `Duration in Days` &lt;dbl&gt;, `Facebook Connected` &lt;chr&gt;,\n#   `Facebook Friends` &lt;dbl&gt;, `Facebook Shares` &lt;dbl&gt;, `Has Video` &lt;chr&gt;,\n#   Latitude &lt;dbl&gt;, Longitude &lt;dbl&gt;, `Creator Bio` &lt;chr&gt;,\n#   `Creator Website` &lt;chr&gt;, `Creator - # Projects Created` &lt;dbl&gt;,\n#   `Creator - # Projects Backed` &lt;dbl&gt;, `# Videos` &lt;dbl&gt;, `# Images` &lt;dbl&gt;, …\n\n\nCode\nclean_df = clean_df %&gt;% filter(Goal_USD &lt; 1e7)\n\n\nSelect necessary columns and store the clean data for plotting.\n\n\nCode\nclean_df &lt;- clean_df %&gt;% rename(Top_Category = `Top Category`)\n# clean_df %&gt;%\n#   select(c(-`Creator Bio`,\n#            -`Creator Website`,\n#            -na_num,\n#            -Pledged,\n#            -Goal)) %&gt;%\n#   write_csv(\"18k_Projects_clean.csv\")"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis\nFor analysis purpose, we use data generated by the code above with ancillary features.\nHere shows the number of missing values in the columns.\n\n\nCode\ncol_na = colSums(is.na(clean_df)) %&gt;%\n  sort(decreasing = TRUE)\ncol_na = col_na[col_na &gt; 0]\ncol_na\n\n\n               Creator Website               Facebook Friends \n                          6604                           5837 \n   Creator - # Projects Backed                       Latitude \n                          4239                             85 \n                     Longitude                       # Videos \n                            85                             85 \n# Words (Risks and Challenges) \n                            85 \n\n\nThe latitude and longitude columns have the most missing values, followed by the creator website, Facebook friend number, creator’s number of projects backed, the number of videos on the page, and the number of words in the “Risk and Challenges” section. It seems that the missing values of (Latitude, Longitude) and (# Videos, # Words (Risks and Challenges) feature pairs appear at the same time.\nTo have a further look, we plot the missing value patterns:\n\n\nCode\nclean_df_miss = clean_df %&gt;% \n  select (col_na %&gt;% names())\nnames(clean_df_miss) = c('Lat.', 'Long.', 'Cre.Web.', 'FB.Con.', 'Cre.numB', 'num.Video', 'num.WoRC')\n\nclean_df_miss %&gt;% \n  plot_missing(percent = TRUE)\n\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nFor features, there are around 50% of the (Latitude, Longitude) pairs missing. Creator Website and Facebook Connected are also common missing values.\nFor data rows, most of them (around 25%) are missing the Facebook Connected information only. This is reasonable for the missing values of the creator’s Facebook and creator’s website, as they may not exist or are not shown on the crowdfunding page.\nWe also identified several patterns:\nFirst, the graph shows that (Latitude, Longitude) and (# Videos, # Words (Risks and Challenges) missing feature pairs appear at the same time. Upon further inspection, we find that it is very similar to `Location`, as the (Latitude, Longitude) coordinates are usually the same for a location. For spacial analysis purposes, we decided to use `Location` only.\nSecond, we find that the missing values of # Videos, # Words (Risks and Challenges) appear together with the missing values of `Creator Website`, Latitude, and Longitude. Such cases are rare, and the values are only missing for projects with end times from January 2014 to March 2014. We checked the crowdfunding webpages and found that the data is accessible. Therefore, manually error or technical issue in data collecting may be the reason for these missing values.\nHere’s the project start and end date ranges.\n\n\nCode\n# get start time range\nclean_df %&gt;% \n  filter(`# Videos` %&gt;% is.na()) %&gt;% \n  select(Start, End) %&gt;% \n  arrange(Start) %&gt;% \n  slice(c(1,n())) %&gt;% pull()\n\n\n[1] \"2014-01-17\" \"2014-03-07\"\n\n\nCode\n# get end time range\nclean_df %&gt;% \n  filter(`# Videos` %&gt;% is.na()) %&gt;% \n  select(Start, End) %&gt;% \n  arrange(End) %&gt;% \n  slice(c(1,n())) %&gt;% pull()\n\n\n[1] \"2014-01-14\" \"2014-03-12\"\n\n\nThird, Facebook Friends is missing if and only if Facebook Connected is False, because the Facebook friend’s information of the creator is not accessible if we don’t know the creator’s Facebook from the webpage.\nThe bar chart shows this result.\n\n\nCode\nclean_df %&gt;% \n  ggplot(aes(x = is.na(`Facebook Friends`))) +\n  geom_bar() +\n  facet_wrap(.~`Facebook Connected`) +\n  labs('Number of missing values in \"Facebook Friends\"') +\n  xlab(\"Number of missing value\")"
  }
]